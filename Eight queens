#include <stdio.h>
# define n 8
int Queenes[n]={0},Counts=0;
int Check(int line,int list){
   for (int i=0; i<line; i++) 
	{ 
        int data=Queenes[i]; //挨个取出前面行中皇后所在位置的列坐标
        //如果在同一列，该位置不能放
        if (list==data) 
		{
            return 0;
        }
        if ((i+data)==(line+list)) //如果当前位置的右斜上方有皇后，在一条斜线上，也不行
      {
            return 0;
        }
        if ((i-data)==(line-list)) //如果当前位置的右斜下方有皇后，在一条斜线上，也不行
	{
       return 0;
     }
    }
  return 1;  //如果以上情况都不是，当前位置就可以放皇后
}
void print()//输出语句

{
    for (int line = 0; line < n; line++)
    {
        int list;
        for ( list = 0; list < Queenes[line]; list++)
        printf("0");
        printf("1");
      for (list = Queenes[line] + 1; list < 8; list++)
		{
         printf("0");
       }
        printf("\n");
       }
    printf("************\n");
 }
void eight_queen(int line)
{
    for (int list=0; list<n; list++) 
	{
        if (Check(line, list)) //对于固定的行列，检查是否和之前的皇后位置冲突
{     Queenes[line]=list; //不冲突，以行为下标的数组位置记录列数

            //如果最后一样也不冲突，证明为一个正确的摆法
            if (line==7) 
			{		
                Counts++;//统计摆法的Counts加1
                print(); 
                Queenes[line]=0; //每次成功，都要将数组重归为0

                return;
            }
           eight_queen(line+1); //继续判断下一样皇后的摆法，递归
 Queenes[line]=0; //不管成功失败，该位置都要重新归0，以便重复使用。
}
}
}
int main() {
    eight_queen(0); //调用回溯函数，参数0表示从棋盘的第一行开始判断
printf("摆放的方式有%d种",Counts);
   return 0;
}
